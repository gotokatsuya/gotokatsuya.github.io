{"version":3,"sources":["webpack:///./src/pages/arts/tiktok-menu.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/image.js"],"names":["Link","posed","a","exit","x","opacity","enter","delay","index","TikTokMenuPage","state","isPopped","items","key","url","image","componentDidMount","this","setState","render","title","keywords","map","href","filename","alt","React","Component","Layout","children","className","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","StaticQueryContext","loader","enqueue","createContext","StaticQueryDataRenderer","staticQueryData","data","query","finalData","Fragment","StaticQuery","props","Consumer","Image","images","edges","find","n","node","relativePath","includes","imageSizes","childImageSharp","sizes"],"mappings":"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","file":"component---src-pages-arts-tiktok-menu-js-2779315d93c41c2abf40.js","sourcesContent":["import React from \"react\"\nimport posed, { PoseGroup } from \"react-pose\"\n\nimport Image from \"../../components/image\"\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\n\nconst Link = posed.a({\n  exit: {\n    x: 100,\n    opacity: 0,\n  },\n  enter: {\n    x: 0,\n    opacity: 1,\n    delay: ({ index }) => 100 + index * 100,\n  },\n})\n\nclass TikTokMenuPage extends React.Component {\n  state = {\n    isPopped: false,\n    items: [\n      {\n        key: \"github\",\n        url: \"https://github.com/gotokatsuya\",\n        image: \"logo-github.png\",\n      },\n      {\n        key: \"twitter\",\n        url: \"https://twitter.com/goka_kun\",\n        image: \"logo-tw.png\",\n      },\n      {\n        key: \"facebook\",\n        url: \"https://www.facebook.com/katsuya.goto.5\",\n        image: \"logo-fb.png\",\n      },\n    ],\n  }\n\n  componentDidMount() {\n    this.setState({ isPopped: true })\n  }\n\n  render() {\n    return (\n      <Layout>\n        <SEO title=\"TiktokMenu\" keywords={[`tiktok`]} />\n        <section>\n          <div>\n            <PoseGroup>\n              {this.state.isPopped &&\n                this.state.items.map(({ key, url, image }, index) => (\n                  <Link index={index} key={key} href={url}>\n                    <Image filename={image} alt={key} />\n                  </Link>\n                ))}\n            </PoseGroup>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default TikTokMenuPage\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport \"./../styles/layout.scss\"\n\nconst Layout = ({ children }) => (\n  <div>\n    <main className=\"layout\">{children}</main>\n  </div>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `StaticQuery`: https://gatsby.dev/staticquery\n */\n\nconst Image = ({ filename, alt }) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                sizes(maxWidth: 1200) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(filename)\n      })\n      if (!image) {\n        return null\n      }\n      const imageSizes = image.node.childImageSharp.sizes\n      return <Img alt={alt} sizes={imageSizes} />\n    }}\n  />\n)\n\nImage.propTypes = {\n  filename: PropTypes.string,\n  alt: PropTypes.string,\n}\n\nImage.defaultProps = {\n  filename: ``,\n  alt: ``,\n}\n\nexport default Image\n"],"sourceRoot":""}